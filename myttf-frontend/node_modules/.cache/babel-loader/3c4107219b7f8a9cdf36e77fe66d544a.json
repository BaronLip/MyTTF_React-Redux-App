{"ast":null,"code":"var _jsxFileName = \"/Users/baronlip/Documents/FlatIronSchool/_bootcamp/Module_5_React-Redux/myttf_r-r_app/src/components/MatchesForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Button, Header, Form, Input, Radio, TextArea } from 'semantic-ui-react';\nexport class MatchesForm extends Component {\n  constructor() {\n    super();\n\n    this.handleOnChange = event => {\n      // Using object destructuring, you can pull out values from an object using a key value of the same name.\n      // With the HTML node's value attribute set to equal the key within state, referring to the value attribute will refer to the right key in state.\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value; // This dynamically fills in the state info based on the input fields.\n\n      this.setState({\n        [name]: value\n      });\n      console.log(this.state);\n    };\n\n    this.handleChecked = (e, {\n      match\n    }) => this.setState({\n      match\n    });\n\n    this.state = {\n      opponent_name: \"\",\n      match_type: \"\",\n      notes: \"\"\n    };\n  }\n\n  render() {\n    const match = this.state.match;\n    console.log(\"You've reached MatchesForm\", this.state);\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      block: true,\n      textAlign: \"center\",\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Create a Match\"), React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      name: \"opponent_name\",\n      control: Input,\n      label: \"Opponent Name\",\n      placeholder: \"Opponent Name\",\n      value: this.state.opponent_name,\n      onChange: this.handleOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Match Type\"), React.createElement(Form.Field, {\n      name: \"match_type\",\n      control: Radio,\n      label: \"Best of 7\",\n      value: \"7\",\n      checked: this.state.match_type === '7',\n      onChange: this.handleChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      name: \"match_type\",\n      control: Radio,\n      label: \"Best of 5\",\n      value: \"5\",\n      checked: this.state.match_type === '5',\n      onChange: this.handleChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      name: \"notes\",\n      control: TextArea,\n      label: \"Notes\",\n      placeholder: \"Think and record the significant moments of this match and what you want to remember.\",\n      value: this.state.notes,\n      onChange: this.handleOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      control: Button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n} // const mapDispatchToProps = (dispatch) => {\n//     return {\n//         addMatch: (formData) => dispatch(addMatch(formData))\n//         // LONG-FORM = addMatch: (formData) => dispatch({type: \"ADD_MATCH\", formData })\n//     }\n// }\n\nexport default connect(null, null)(MatchesForm);","map":{"version":3,"sources":["/Users/baronlip/Documents/FlatIronSchool/_bootcamp/Module_5_React-Redux/myttf_r-r_app/src/components/MatchesForm.js"],"names":["React","Component","connect","Button","Header","Form","Input","Radio","TextArea","MatchesForm","constructor","handleOnChange","event","target","name","value","setState","console","log","state","handleChecked","e","match","opponent_name","match_type","notes","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport {\n    Button,\n    Header,\n    Form,\n    Input,\n    Radio,\n    TextArea,\n} from 'semantic-ui-react'\n\nexport class MatchesForm extends Component {\n    constructor () {\n        super();\n        this.state = {\n            opponent_name: \"\",\n            match_type: \"\",\n            notes: \"\",\n        }   \n    }\n\n    handleOnChange = event => {\n        // Using object destructuring, you can pull out values from an object using a key value of the same name.\n        // With the HTML node's value attribute set to equal the key within state, referring to the value attribute will refer to the right key in state.\n        const { name, value } = event.target;\n        // This dynamically fills in the state info based on the input fields.\n        this.setState({\n            [name]: value\n        });\n        console.log(this.state)\n    }\n    handleChecked = (e, { match }) => this.setState({ match })\n\n    render() {\n        const { match } = this.state\n        console.log(\"You've reached MatchesForm\", this.state)\n        return (\n            <Form>\n                <Header as='h3' block textAlign='center' color='blue'>\n                    Create a Match\n                </Header>\n\n                <Form.Group widths='equal'>\n                    <Form.Field\n                        name=\"opponent_name\"\n                        control={Input}\n                        label='Opponent Name'\n                        placeholder='Opponent Name'\n                        value={this.state.opponent_name}\n                        onChange={this.handleOnChange}\n                    />\n                </Form.Group>\n\n                <Form.Group inline>\n                    <label>Match Type</label>\n                    <Form.Field\n                        name=\"match_type\"\n                        control={Radio}\n                        label='Best of 7'\n                        value='7'\n                        checked={this.state.match_type === '7'}\n                        onChange={this.handleChecked}\n                    />\n                    <Form.Field\n                        name=\"match_type\"\n                        control={Radio}\n                        label='Best of 5'\n                        value='5'\n                        checked={this.state.match_type === '5'}\n                        onChange={this.handleChecked}\n                    />\n                </Form.Group>\n                <Form.Field\n                    name=\"notes\"\n                    control={TextArea}\n                    label='Notes'\n                    placeholder='Think and record the significant moments of this match and what you want to remember.'\n                    value={this.state.notes}\n                    onChange={this.handleOnChange}\n                />\n                <Form.Field control={Button}>Submit</Form.Field>\n            </Form>\n        )\n    }\n}\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         addMatch: (formData) => dispatch(addMatch(formData))\n//         // LONG-FORM = addMatch: (formData) => dispatch({type: \"ADD_MATCH\", formData })\n//     }\n// }\n\nexport default connect(null, null)(MatchesForm)\n"]},"metadata":{},"sourceType":"module"}