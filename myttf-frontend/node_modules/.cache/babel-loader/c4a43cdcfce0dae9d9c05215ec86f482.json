{"ast":null,"code":"import _objectSpread from \"/Users/baronlip/Documents/FlatIronSchool/_bootcamp/Module_5_React-Redux/myttf_r-r_app/myttf-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/baronlip/Documents/FlatIronSchool/_bootcamp/Module_5_React-Redux/myttf_r-r_app/myttf-frontend/src/components/MatchesForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { createMatch } from \"../actions/MatchActions\";\nimport { createGame } from \"../actions/GameActions\";\nimport { Button, Header, Form, Input, Radio, TextArea, Grid, Menu } from 'semantic-ui-react';\nconst gridRowStyle = {\n  paddingTop: \".1rem\",\n  paddingBottom: \".1rem\"\n};\n\nclass MatchesForm extends Component {\n  constructor() {\n    super();\n\n    this.handleOnChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleChecked = (e, {\n      value\n    }) => {\n      this.setState({\n        match_type: value\n      });\n    };\n\n    this.onChangeForGames = event => {\n      // debugger\n      let _event$target2 = event.target,\n          name = _event$target2.name,\n          value = _event$target2.value;\n      value = parseInt(value, 10); // Create index by taking the dataset-id of the input element.\n\n      let index = parseInt(event.target.parentElement.dataset.id) - 1; // Create a duplicate of the current array of games.\n\n      const newGames = [...this.state.games]; // Working backwards, add the object properties to a new game with the index of the dataset-id.\n\n      newGames[index] = _objectSpread({}, newGames[index], {\n        [name]: value\n      }); // Assign the value of newGames, an array of games, to the key of games within this.state.\n\n      this.setState(_objectSpread({}, this.state, {\n        games: newGames\n      }));\n    };\n\n    this.handleSubmit = event => {\n      console.log(\"Submitting from MatchesForm.\", this.props.player);\n      event.preventDefault();\n      let matchGames; // matches.forEach(match => {\n      //     let gameWin = 0\n      //     let gameLoss = 0\n      //     matchGames = games.filter(game => {\n      //         return game.match_id === match.id\n      //     })\n      //     // debugger\n      //     matchGames.forEach(game => {\n      //         if (game.player_score > game.opponent_score) {\n      //             return gameWin += 1\n      //         } else {\n      //             return gameLoss += 1\n      //         }\n      //     });\n      //     // debugger\n      //     gameWin > gameLoss ? player.wins += 1 : player.losses += 1\n      // });\n\n      this.props.createMatch(_objectSpread({}, this.state, {\n        bookmarked: false\n      }), this.props.player); // Reset the form below.\n\n      this.setState({\n        date: \"\",\n        opponent_name: \"\",\n        match_type: \"\",\n        notes: \"\",\n        bookmarked: null,\n        games: []\n      });\n    };\n\n    this.state = {\n      opponent_name: \"\",\n      match_type: \"\",\n      notes: \"\",\n      bookmarked: null,\n      games: [{// player_score: \"\",\n        // opponent_score: \"\"\n      }]\n    };\n  }\n\n  render() {\n    console.log(\"MatchesForm.js\", this.state, this.props);\n    let gameCount = parseInt(this.state.match_type);\n    let gameInputs;\n\n    if (this.state.match_type) {\n      gameInputs = [...Array(gameCount)].map((game, i) => React.createElement(Grid, {\n        columns: \"equal\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        style: gridRowStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Menu, {\n        fluid: true,\n        vertical: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Menu.Item, {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Game \", i + 1))), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Input, {\n        \"data-id\": i + 1,\n        placeholder: \"you\",\n        name: \"player_score\",\n        onChange: this.onChangeForGames,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Input, {\n        \"data-id\": i + 1,\n        name: \"opponent_score\",\n        placeholder: \"opponent\" // value={this.state.opponent_name}\n        ,\n        onChange: this.onChangeForGames,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })))));\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Form, {\n      id: \"match-form\",\n      onSubmit: event => this.handleSubmit(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      block: true,\n      textAlign: \"center\",\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Create a Match\"), React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      fluid: true,\n      label: \"Date\",\n      placeholder: \"Date:\",\n      type: \"date\",\n      name: \"date\" // Date input does not need to be controlled for value to pass into state. Uncommenting below causes an error.\n      // value={new Date().toISOString().slice(0, 10)}\n      ,\n      onChange: this.handleOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      name: \"opponent_name\",\n      control: Input,\n      label: \"Opponent Name:\",\n      placeholder: \"Opponent Name\",\n      value: this.state.opponent_name,\n      onChange: this.handleOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Match Type:\"), React.createElement(Form.Field, {\n      \"data-index\": \"1\",\n      name: \"match_type\",\n      control: Radio,\n      label: \"Best of 7\",\n      value: \"7\",\n      checked: this.state.match_type === \"7\",\n      onChange: this.handleChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      \"data-index\": \"1\",\n      name: \"match_type\",\n      control: Radio,\n      label: \"Best of 5\",\n      value: \"5\",\n      checked: this.state.match_type === \"5\",\n      onChange: this.handleChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, gameInputs), React.createElement(Form.Field, {\n      style: {\n        height: 50\n      },\n      name: \"notes\",\n      control: TextArea,\n      label: \"Notes:\",\n      placeholder: \"Notes\",\n      value: this.state.notes,\n      onChange: this.handleOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      form: \"match-form\",\n      control: Button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n} //Is ES6 syntax able to take multiple arguments?\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createMatch: (formData, player) => dispatch(createMatch(formData, player)),\n    createGame: gameData => dispatch(createGame(gameData))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(MatchesForm);","map":{"version":3,"sources":["/Users/baronlip/Documents/FlatIronSchool/_bootcamp/Module_5_React-Redux/myttf_r-r_app/myttf-frontend/src/components/MatchesForm.js"],"names":["React","Component","connect","createMatch","createGame","Button","Header","Form","Input","Radio","TextArea","Grid","Menu","gridRowStyle","paddingTop","paddingBottom","MatchesForm","constructor","handleOnChange","event","target","name","value","setState","handleChecked","e","match_type","onChangeForGames","parseInt","index","parentElement","dataset","id","newGames","state","games","handleSubmit","console","log","props","player","preventDefault","matchGames","bookmarked","date","opponent_name","notes","render","gameCount","gameInputs","Array","map","game","i","height","mapDispatchToProps","dispatch","formData","gameData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { createMatch } from \"../actions/MatchActions\";\nimport { createGame } from \"../actions/GameActions\"\nimport {\n    Button,\n    Header,\n    Form,\n    Input,\n    Radio,\n    TextArea,\n    Grid,\n    Menu,\n} from 'semantic-ui-react'\n\nconst gridRowStyle = {\n    paddingTop:\".1rem\",\n    paddingBottom:\".1rem\"\n}\n\nclass MatchesForm extends Component {\n    constructor () {\n        super();\n        this.state = {\n            opponent_name: \"\",\n            match_type: \"\",\n            notes: \"\",\n            bookmarked: null,\n            games: [\n                {\n                    // player_score: \"\",\n                    // opponent_score: \"\"\n                }\n            ]\n        }   \n    }\n\n    handleOnChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    }\n    \n    handleChecked = (e, { value }) => {\n        this.setState({ match_type: value })\n    }\n\n    onChangeForGames = (event) => {\n        // debugger\n        let { name, value } = event.target;\n        value = parseInt(value, 10);\n        // Create index by taking the dataset-id of the input element.\n        let index = parseInt(event.target.parentElement.dataset.id) - 1\n        // Create a duplicate of the current array of games.\n        const newGames = [...this.state.games]\n        // Working backwards, add the object properties to a new game with the index of the dataset-id.\n        newGames[index] = {...newGames[index], [name]: value}\n        // Assign the value of newGames, an array of games, to the key of games within this.state.\n        this.setState( {...this.state, games: newGames } );\n    }\n       \n\n    handleSubmit = event => {\n        console.log(\"Submitting from MatchesForm.\", this.props.player);\n        event.preventDefault();\n\n        let matchGames\n        // matches.forEach(match => {\n        //     let gameWin = 0\n        //     let gameLoss = 0\n        //     matchGames = games.filter(game => {\n        //         return game.match_id === match.id\n        //     })\n        //     // debugger\n        //     matchGames.forEach(game => {\n        //         if (game.player_score > game.opponent_score) {\n        //             return gameWin += 1\n        //         } else {\n        //             return gameLoss += 1\n        //         }\n        //     });\n        //     // debugger\n        //     gameWin > gameLoss ? player.wins += 1 : player.losses += 1\n        // });\n\n\n        this.props.createMatch({...this.state, bookmarked: false }, this.props.player);\n        // Reset the form below.\n        this.setState({\n            date: \"\",\n            opponent_name: \"\",\n            match_type: \"\",\n            notes: \"\",\n            bookmarked: null,\n            games: [ ]\n        });\n    }\n\n    render() {\n        console.log(\"MatchesForm.js\", this.state, this.props)\n        let gameCount = parseInt(this.state.match_type);\n        let gameInputs\n\n        if (this.state.match_type) {\n            gameInputs = [...Array(gameCount)].map((game, i) => ( \n                <Grid columns='equal' key={i}>\n                    <Grid.Row style={gridRowStyle}>\n                        <Grid.Column>\n                            <Menu fluid vertical>\n                                <Menu.Item className='header'>Game {i + 1}</Menu.Item>\n                            </Menu>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Input\n                                data-id={i + 1}\n                                placeholder='you'\n                                name=\"player_score\"\n                                onChange={this.onChangeForGames}\n                            />\n                        </Grid.Column>\n\n                        <Grid.Column>\n                            <Input\n                                data-id={i + 1}\n                                name=\"opponent_score\"\n                                placeholder='opponent'\n                                // value={this.state.opponent_name}\n                                onChange={this.onChangeForGames}\n                            />\n                        </Grid.Column>\n                        {/* <Grid.Column>\n                            <Button form=\"game-form\">Save</Button>\n                        </Grid.Column> */}\n                    </Grid.Row>\n                </Grid>\n                )\n            )\n        }\n\n        return (\n        <>\n            <Form id=\"match-form\" onSubmit={ event => this.handleSubmit(event) }>\n                <Header as='h3' block textAlign='center' color='blue'>\n                    Create a Match\n                </Header>\n                <Form.Group widths='equal'>\n                    <Form.Input \n                        fluid label='Date' \n                        placeholder='Date:' \n                        type=\"date\" \n                        name=\"date\"\n                        // Date input does not need to be controlled for value to pass into state. Uncommenting below causes an error.\n                        // value={new Date().toISOString().slice(0, 10)}\n                        onChange={this.handleOnChange}/>\n\n                    <Form.Field\n                        name=\"opponent_name\"\n                        control={Input}\n                        label='Opponent Name:'\n                        placeholder='Opponent Name'\n                        value={this.state.opponent_name}\n                        onChange={this.handleOnChange}\n                    />\n                </Form.Group>\n\n                <Form.Group inline>\n                    <label>Match Type:</label>\n                    <Form.Field\n                        data-index=\"1\"\n                        name=\"match_type\"\n                        control={Radio}\n                        label='Best of 7'\n                        value='7'\n                        checked={this.state.match_type === \"7\"}\n                        onChange={this.handleChecked}\n                    />\n                    <Form.Field\n                        data-index=\"1\"\n                        name=\"match_type\"\n                        control={Radio}\n                        label='Best of 5'\n                        value='5'\n                        checked={this.state.match_type === \"5\"}\n                        onChange={this.handleChecked}\n                    />\n                </Form.Group>\n                \n                <Form.Field>\n                    {gameInputs}                \n                </Form.Field>\n                \n                <Form.Field style={{ height: 50 }}\n                    name=\"notes\"\n                    control={TextArea}\n                    label='Notes:'\n                    placeholder='Notes'\n                    value={this.state.notes}\n                    onChange={this.handleOnChange}\n                />\n                \n                <Form.Field form=\"match-form\"\n                    control={Button}>\n                    Submit\n                </Form.Field>\n            </Form>\n\n        </>\n        )\n    }\n}\n\n//Is ES6 syntax able to take multiple arguments?\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createMatch: (formData, player) => dispatch(createMatch(formData, player)),\n        createGame: (gameData) => dispatch(createGame(gameData))\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(MatchesForm);"]},"metadata":{},"sourceType":"module"}