{"ast":null,"code":"// export const initFetchPlayer = () => {\n//     console.log(\"actions/Playeractions.js initFetchPlayer\");\n//     return { type: \"INIT_FETCH_PLAYER\"}\n// }\nexport const fetchPlayer = () => {\n  console.log(\"Playeractions.js fetchPlayer\");\n  return dispatch => {\n    dispatch({\n      type: \"FETCH_PLAYER\"\n    });\n    fetch(\"http://localhost:3000/api/v1/players/1\").then(response => response.json()) // .then(player => console.log(player))\n    .then(player => dispatch(showPlayer(player))).catch(error => console.log(error));\n  };\n};\nexport const showPlayer = player => {\n  console.log(\"actions/PlayerActions.js showPlayer\", player);\n  return {\n    type: \"SHOW_PLAYER\",\n    player\n  };\n};\nexport const addPlayer = player => {\n  console.log(\"actions/PlayerActions.js addPlayer\", player);\n  return dispatch => fetch('http://localhost:3000/api/v1/players', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(player)\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error(`${response.statusText} make sure to fill in all the blanks.`);\n    } // // Needs experimental syntax plugin in order to throw expression.\n    // if (!response.ok) {\n    //     response.text().then(text => throw Error(text))\n    // }\n    // else {\n    //     return response.json();\n    // }\n\n  }) // ...reflect the added match to the window...\n  .then(match => {\n    dispatch({\n      type: \"ADD_PLAYER\",\n      player\n    });\n  }) // ...or show an error.\n  .catch(error => alert(error));\n  return {\n    type: \"ADD_PLAYER\",\n    player\n  };\n};","map":{"version":3,"sources":["/Users/baronlip/Documents/FlatIronSchool/_bootcamp/Module_5_React-Redux/myttf_r-r_app/myttf-frontend/src/actions/PlayerActions.js"],"names":["fetchPlayer","console","log","dispatch","type","fetch","then","response","json","player","showPlayer","catch","error","addPlayer","method","headers","body","JSON","stringify","ok","Error","statusText","match","alert"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,WAAW,GAAG,MAAM;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEA,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AAEAC,IAAAA,KAAK,CAAC,wCAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAEA;AAFA,KAGCF,IAHD,CAGMG,MAAM,IAAIN,QAAQ,CAACO,UAAU,CAACD,MAAD,CAAX,CAHxB,EAICE,KAJD,CAIOC,KAAK,IAAIX,OAAO,CAACC,GAAR,CAAYU,KAAZ,CAJhB;AAKH,GARD;AASH,CAZM;AAcP,OAAO,MAAMF,UAAU,GAAID,MAAD,IAAY;AAClCR,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDO,MAAnD;AACA,SAAO;AAAEL,IAAAA,IAAI,EAAE,aAAR;AAAuBK,IAAAA;AAAvB,GAAP;AACH,CAHM;AAKP,OAAO,MAAMI,SAAS,GAAIJ,MAAD,IAAY;AACjCR,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDO,MAAlD;AAEA,SAAQN,QAAD,IACHE,KAAK,CAAC,sCAAD,EAAyC;AAC1CS,IAAAA,MAAM,EAAE,MADkC;AAE1CC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFiC;AAK1CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,MAAf;AALoC,GAAzC,CAAL,CAOCH,IAPD,CAOMC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACY,EAAb,EAAiB;AACb,aAAOZ,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,MAGK;AAED,YAAM,IAAIY,KAAJ,CAAW,GAAEb,QAAQ,CAACc,UAAW,uCAAjC,CAAN;AACH,KAPa,CAQd;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,GAtBD,EAuBA;AAvBA,GAwBCf,IAxBD,CAwBMgB,KAAK,IAAI;AAAEnB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,YAAR;AAAsBK,MAAAA;AAAtB,KAAD,CAAR;AAA0C,GAxB3D,EAyBA;AAzBA,GA0BCE,KA1BD,CA0BOC,KAAK,IAAIW,KAAK,CAACX,KAAD,CA1BrB,CADJ;AA4BA,SAAO;AAAER,IAAAA,IAAI,EAAE,YAAR;AAAsBK,IAAAA;AAAtB,GAAP;AACH,CAhCM","sourcesContent":["// export const initFetchPlayer = () => {\n//     console.log(\"actions/Playeractions.js initFetchPlayer\");\n//     return { type: \"INIT_FETCH_PLAYER\"}\n// }\n\nexport const fetchPlayer = () => {\n    console.log(\"Playeractions.js fetchPlayer\");\n    \n    return (dispatch) => {\n        dispatch({type: \"FETCH_PLAYER\"});\n        \n        fetch(\"http://localhost:3000/api/v1/players/1\")\n        .then(response => response.json())\n        // .then(player => console.log(player))\n        .then(player => dispatch(showPlayer(player)))\n        .catch(error => console.log(error));\n    };\n}\n\nexport const showPlayer = (player) => {\n    console.log(\"actions/PlayerActions.js showPlayer\", player);\n    return { type: \"SHOW_PLAYER\", player };\n}\n\nexport const addPlayer = (player) => {\n    console.log(\"actions/PlayerActions.js addPlayer\", player);\n\n    return (dispatch) =>\n        fetch('http://localhost:3000/api/v1/players', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(player)\n        })\n        .then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n            else {\n\n                throw new Error(`${response.statusText} make sure to fill in all the blanks.`)\n            }\n            // // Needs experimental syntax plugin in order to throw expression.\n            // if (!response.ok) {\n            //     response.text().then(text => throw Error(text))\n            // }\n            // else {\n            //     return response.json();\n            // }\n        })\n        // ...reflect the added match to the window...\n        .then(match => { dispatch({ type: \"ADD_PLAYER\", player }) })\n        // ...or show an error.\n        .catch(error => alert(error));\n    return { type: \"ADD_PLAYER\", player };\n}\n\n\n"]},"metadata":{},"sourceType":"module"}